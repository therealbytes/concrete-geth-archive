/* Autogenerated file. Do not edit manually. */

package {{.Package}};

import (
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/concrete/codegen/datamod"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
)

type {{.Schema.Name}}Item struct {
    datamod.StorageStruct
}

func New{{.Schema.Name}}Item(slot lib.StorageSlot) *{{.Schema.Name}}Item {
    sizes := []int{{"{"}}{{range .Schema.Values}}
        {{.Type.Size}},{{end}}
    }
    return &{{.Schema.Name}}Item{
        *datamod.NewStorageStruct(slot, sizes),
    }
}
{{if eq (len .Schema.Values) 1}}{{range .Schema.Values}}
func (item *{{$.Schema.Name}}Item) Get() {{.Type.GoType}} {
    data := item.GetField({{.Index}})
    return datamod.{{.Type.DecodeFunc}}({{.Type.Size}}, data)
}

func (item *{{$.Schema.Name}}Item) Set(value {{.Type.GoType}}) {
    data := datamod.{{.Type.EncodeFunc}}({{.Type.Size}}, value)
    item.SetField({{.Index}}, data)
}{{end}}{{end}}
{{range .Schema.Values}}
func (item *{{$.Schema.Name}}Item) Get{{.Name}}() {{.Type.GoType}} {
    data := item.GetField({{.Index}})
    return datamod.{{.Type.DecodeFunc}}({{.Type.Size}}, data)
}

func (item *{{$.Schema.Name}}Item) Set{{.Name}}(value {{.Type.GoType}}) {
    data := datamod.{{.Type.EncodeFunc}}({{.Type.Size}}, value)
    item.SetField({{.Index}}, data)
}{{end}}
